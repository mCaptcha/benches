(()=>{"use strict";var e,t,r,n,o,a={485:(e,t,r)=>{r.a(e,(async n=>{r.d(t,{I:()=>h});var o=r(426);e=r.hmd(e);var a=n([o]);o=(a.then?await a:a)[0];let c=0,i=null;function s(){return null!==i&&i.buffer===o.memory.buffer||(i=new Uint8Array(o.memory.buffer)),i}let d=new("undefined"==typeof TextEncoder?(0,e.require)("util").TextEncoder:TextEncoder)("utf-8");const u="function"==typeof d.encodeInto?function(e,t){return d.encodeInto(e,t)}:function(e,t){const r=d.encode(e);return t.set(r),{read:e.length,written:r.length}};function f(e,t,r){if(void 0===r){const r=d.encode(e),n=t(r.length);return s().subarray(n,n+r.length).set(r),c=r.length,n}let n=e.length,o=t(n);const a=s();let i=0;for(;i<n;i++){const t=e.charCodeAt(i);if(t>127)break;a[o+i]=t}if(i!==n){0!==i&&(e=e.slice(i)),o=r(o,n,n=i+3*e.length);const t=s().subarray(o+i,o+n);i+=u(e,t).written}return c=i,o}let l=null;function p(){return null!==l&&l.buffer===o.memory.buffer||(l=new Int32Array(o.memory.buffer)),l}let b=new("undefined"==typeof TextDecoder?(0,e.require)("util").TextDecoder:TextDecoder)("utf-8",{ignoreBOM:!0,fatal:!0});function h(e,t,r){try{const y=o.__wbindgen_add_to_stack_pointer(-16);var n=f(e,o.__wbindgen_malloc,o.__wbindgen_realloc),a=c,i=f(t,o.__wbindgen_malloc,o.__wbindgen_realloc),d=c;o.gen_pow(y,n,a,i,d,r);var u=p()[y/4+0],l=p()[y/4+1];return h=u,m=l,b.decode(s().subarray(h,h+m))}finally{o.__wbindgen_add_to_stack_pointer(16),o.__wbindgen_free(u,l)}var h,m}b.decode()}))},607:(e,t,r)=>{r.a(e,(async e=>{var t=r(485),n=e([t]);t=(n.then?await n:n)[0];for(var o=document.getElementById("status"),a={string:"6e2a53dbc7d307970d7ba3c0000221722cb74f1c325137251ce8fa5c2240",difficulty_factor:1,salt:"674243647f1c355da8607a8cdda05120d79ca5d1af8b3b49359d056a0a82"},c=[],i=function(e,t){var r=document.createElement("p"),n=document.createTextNode("difficulty: "+e+" time: "+t);r.appendChild(n),document.body.appendChild(r),c.push({difficulty:e,time:t})},s=1;s<10;s++){var d=5e5*s;a.difficulty_factor=d;var u=performance.now();(0,t.I)(a.salt,a.string,a.difficulty_factor),i(d,performance.now()-u)}var f={threads:window.navigator.hardwareConcurrency,oscup:window.navigator.userAgent};console.log(c),console.log(f),i(f.oscup,f.threads),o.innerHTML="Benchmark finished"}))},426:(e,t,r)=>{e.exports=r.v(t,e.id,"b08ac87b47bbc78ac8ba")}},c={};function i(e){var t=c[e];if(void 0!==t)return t.exports;var r=c[e]={id:e,loaded:!1,exports:{}};return a[e](r,r.exports,i),r.loaded=!0,r.exports}e="function"==typeof Symbol?Symbol("webpack then"):"__webpack_then__",t="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",r=e=>{e&&(e.forEach((e=>e.r--)),e.forEach((e=>e.r--?e.r++:e())))},n=e=>!--e.r&&e(),o=(e,t)=>e?e.push(t):n(t),i.a=(a,c,i)=>{var s,d,u,f=i&&[],l=a.exports,p=!0,b=!1,h=(t,r,n)=>{b||(b=!0,r.r+=t.length,t.map(((t,o)=>t[e](r,n))),b=!1)},m=new Promise(((e,t)=>{u=t,d=()=>(e(l),r(f),f=0)}));m[t]=l,m[e]=(e,t)=>{if(p)return n(e);s&&h(s,e,t),o(f,e),m.catch(t)},a.exports=m,c((a=>{if(!a)return d();var c,i;s=(a=>a.map((a=>{if(null!==a&&"object"==typeof a){if(a[e])return a;if(a.then){var c=[];a.then((e=>{i[t]=e,r(c),c=0}));var i={};return i[e]=(e,t)=>(o(c,e),a.catch(t)),i}}var s={};return s[e]=e=>n(e),s[t]=a,s})))(a);var u=new Promise(((e,r)=>{(c=()=>e(i=s.map((e=>e[t])))).r=0,h(s,c,r)}));return c.r?u:i})).then(d,u),p=!1},i.d=(e,t)=>{for(var r in t)i.o(t,r)&&!i.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),i.hmd=e=>((e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e),i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),i.v=(e,t,r,n)=>{var o=fetch(i.p+""+r+".module.wasm");return"function"==typeof WebAssembly.instantiateStreaming?WebAssembly.instantiateStreaming(o,n).then((t=>Object.assign(e,t.instance.exports))):o.then((e=>e.arrayBuffer())).then((e=>WebAssembly.instantiate(e,n))).then((t=>Object.assign(e,t.instance.exports)))},(()=>{var e;i.g.importScripts&&(e=i.g.location+"");var t=i.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=e})(),i(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,