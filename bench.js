(()=>{"use strict";var e,t,r,n,o,a={485:(e,t,r)=>{r.a(e,(async n=>{r.d(t,{I:()=>h});var o=r(426);e=r.hmd(e);var a=n([o]);o=(a.then?await a:a)[0];let c=0,i=null;function s(){return null!==i&&i.buffer===o.memory.buffer||(i=new Uint8Array(o.memory.buffer)),i}let f=new("undefined"==typeof TextEncoder?(0,e.require)("util").TextEncoder:TextEncoder)("utf-8");const l="function"==typeof f.encodeInto?function(e,t){return f.encodeInto(e,t)}:function(e,t){const r=f.encode(e);return t.set(r),{read:e.length,written:r.length}};function u(e,t,r){if(void 0===r){const r=f.encode(e),n=t(r.length);return s().subarray(n,n+r.length).set(r),c=r.length,n}let n=e.length,o=t(n);const a=s();let i=0;for(;i<n;i++){const t=e.charCodeAt(i);if(t>127)break;a[o+i]=t}if(i!==n){0!==i&&(e=e.slice(i)),o=r(o,n,n=i+3*e.length);const t=s().subarray(o+i,o+n);i+=l(e,t).written}return c=i,o}let d=null;function b(){return null!==d&&d.buffer===o.memory.buffer||(d=new Int32Array(o.memory.buffer)),d}let p=new("undefined"==typeof TextDecoder?(0,e.require)("util").TextDecoder:TextDecoder)("utf-8",{ignoreBOM:!0,fatal:!0});function h(e,t,r){try{const y=o.__wbindgen_add_to_stack_pointer(-16);var n=u(e,o.__wbindgen_malloc,o.__wbindgen_realloc),a=c,i=u(t,o.__wbindgen_malloc,o.__wbindgen_realloc),f=c;o.gen_pow(y,n,a,i,f,r);var l=b()[y/4+0],d=b()[y/4+1];return h=l,m=d,p.decode(s().subarray(h,h+m))}finally{o.__wbindgen_add_to_stack_pointer(16),o.__wbindgen_free(l,d)}var h,m}p.decode()}))},303:(e,t,r)=>{r.a(e,(async e=>{var t=r(485),n=e([t]);t=(n.then?await n:n)[0];var o={string:"6e2a53dbc7d307970d7ba3c0000221722cb74f1c325137251ce8fa5c2240",difficulty_factor:1,salt:"674243647f1c355da8607a8cdda05120d79ca5d1af8b3b49359d056a0a82"};console.debug("worker registered"),onmessage=function(e){console.debug("message received at worker");var r=parseInt(e.data);o.difficulty_factor=r;var n=performance.now();(0,t.I)(o.salt,o.string,o.difficulty_factor);var a=performance.now();postMessage({difficulty:r,time:a-n})}}))},426:(e,t,r)=>{e.exports=r.v(t,e.id,"b08ac87b47bbc78ac8ba")}},c={};function i(e){var t=c[e];if(void 0!==t)return t.exports;var r=c[e]={id:e,loaded:!1,exports:{}};return a[e](r,r.exports,i),r.loaded=!0,r.exports}e="function"==typeof Symbol?Symbol("webpack then"):"__webpack_then__",t="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",r=e=>{e&&(e.forEach((e=>e.r--)),e.forEach((e=>e.r--?e.r++:e())))},n=e=>!--e.r&&e(),o=(e,t)=>e?e.push(t):n(t),i.a=(a,c,i)=>{var s,f,l,u=i&&[],d=a.exports,b=!0,p=!1,h=(t,r,n)=>{p||(p=!0,r.r+=t.length,t.map(((t,o)=>t[e](r,n))),p=!1)},m=new Promise(((e,t)=>{l=t,f=()=>(e(d),r(u),u=0)}));m[t]=d,m[e]=(e,t)=>{if(b)return n(e);s&&h(s,e,t),o(u,e),m.catch(t)},a.exports=m,c((a=>{if(!a)return f();var c,i;s=(a=>a.map((a=>{if(null!==a&&"object"==typeof a){if(a[e])return a;if(a.then){var c=[];a.then((e=>{i[t]=e,r(c),c=0}));var i={};return i[e]=(e,t)=>(o(c,e),a.catch(t)),i}}var s={};return s[e]=e=>n(e),s[t]=a,s})))(a);var l=new Promise(((e,r)=>{(c=()=>e(i=s.map((e=>e[t])))).r=0,h(s,c,r)}));return c.r?l:i})).then(f,l),b=!1},i.d=(e,t)=>{for(var r in t)i.o(t,r)&&!i.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),i.hmd=e=>((e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e),i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),i.v=(e,t,r,n)=>{var o=fetch(i.p+""+r+".module.wasm");return"function"==typeof WebAssembly.instantiateStreaming?WebAssembly.instantiateStreaming(o,n).then((t=>Object.assign(e,t.instance.exports))):o.then((e=>e.arrayBuffer())).then((e=>WebAssembly.instantiate(e,n))).then((t=>Object.assign(e,t.instance.exports)))},(()=>{var e;i.g.importScripts&&(e=i.g.location+"");var t=i.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=e})(),i(303)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUlFLFNBQVNyRSxXQUUvQzhELEVBQ0w5QixNQUFNc0MsR0FBT0EsRUFBRUMsZ0JBQ2Z2QyxNQUFNd0MsR0FBV1AsWUFBWVEsWUFBWUQsRUFBT1gsS0FDaEQ3QixNQUFNbUMsR0FBUzNCLE9BQU80QixPQUFPcEUsRUFBU21FLEVBQUlFLFNBQVNyRSxZLE1DVHRELElBQUkwRSxFQUNBN0UsRUFBb0IrQyxFQUFFK0IsZ0JBQWVELEVBQVk3RSxFQUFvQitDLEVBQUVnQyxTQUFXLElBQ3RGLElBQUlDLEVBQVdoRixFQUFvQitDLEVBQUVpQyxTQUNyQyxJQUFLSCxHQUFhRyxJQUNiQSxFQUFTQyxnQkFDWkosRUFBWUcsRUFBU0MsY0FBY0MsTUFDL0JMLEdBQVcsQ0FDZixJQUFJTSxFQUFVSCxFQUFTSSxxQkFBcUIsVUFDekNELEVBQVFwSSxTQUFROEgsRUFBWU0sRUFBUUEsRUFBUXBJLE9BQVMsR0FBR21JLEtBSzdELElBQUtMLEVBQVcsTUFBTSxJQUFJckIsTUFBTSx5REFDaENxQixFQUFZQSxFQUFVUSxRQUFRLE9BQVEsSUFBSUEsUUFBUSxRQUFTLElBQUlBLFFBQVEsWUFBYSxLQUNwRnJGLEVBQW9CbUUsRUFBSVUsRyxHQ1pFN0UsRUFBb0IsTSIsInNvdXJjZXMiOlsid2VicGFjazovL2JlbmNoZXMvd2VicGFjay9ydW50aW1lL2FzeW5jIG1vZHVsZSIsIndlYnBhY2s6Ly9iZW5jaGVzLy4vbm9kZV9tb2R1bGVzL21jYXB0Y2hhLWJyb3dzZXIvbWNhcHRjaGFfYnJvd3Nlcl9iZy5qcyIsIndlYnBhY2s6Ly9iZW5jaGVzLy4vc3JjL2JlbmNoLnRzIiwid2VicGFjazovL2JlbmNoZXMvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vYmVuY2hlcy93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vYmVuY2hlcy93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL2JlbmNoZXMvd2VicGFjay9ydW50aW1lL2hhcm1vbnkgbW9kdWxlIGRlY29yYXRvciIsIndlYnBhY2s6Ly9iZW5jaGVzL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vYmVuY2hlcy93ZWJwYWNrL3J1bnRpbWUvd2FzbSBsb2FkaW5nIiwid2VicGFjazovL2JlbmNoZXMvd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8vYmVuY2hlcy93ZWJwYWNrL3N0YXJ0dXAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHdlYnBhY2tUaGVuID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sKFwid2VicGFjayB0aGVuXCIpIDogXCJfX3dlYnBhY2tfdGhlbl9fXCI7XG52YXIgd2VicGFja0V4cG9ydHMgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgPyBTeW1ib2woXCJ3ZWJwYWNrIGV4cG9ydHNcIikgOiBcIl9fd2VicGFja19leHBvcnRzX19cIjtcbnZhciBjb21wbGV0ZVF1ZXVlID0gKHF1ZXVlKSA9PiB7XG5cdGlmKHF1ZXVlKSB7XG5cdFx0cXVldWUuZm9yRWFjaCgoZm4pID0+IChmbi5yLS0pKTtcblx0XHRxdWV1ZS5mb3JFYWNoKChmbikgPT4gKGZuLnItLSA/IGZuLnIrKyA6IGZuKCkpKTtcblx0fVxufVxudmFyIGNvbXBsZXRlRnVuY3Rpb24gPSAoZm4pID0+ICghLS1mbi5yICYmIGZuKCkpO1xudmFyIHF1ZXVlRnVuY3Rpb24gPSAocXVldWUsIGZuKSA9PiAocXVldWUgPyBxdWV1ZS5wdXNoKGZuKSA6IGNvbXBsZXRlRnVuY3Rpb24oZm4pKTtcbnZhciB3cmFwRGVwcyA9IChkZXBzKSA9PiAoZGVwcy5tYXAoKGRlcCkgPT4ge1xuXHRpZihkZXAgIT09IG51bGwgJiYgdHlwZW9mIGRlcCA9PT0gXCJvYmplY3RcIikge1xuXHRcdGlmKGRlcFt3ZWJwYWNrVGhlbl0pIHJldHVybiBkZXA7XG5cdFx0aWYoZGVwLnRoZW4pIHtcblx0XHRcdHZhciBxdWV1ZSA9IFtdO1xuXHRcdFx0ZGVwLnRoZW4oKHIpID0+IHtcblx0XHRcdFx0b2JqW3dlYnBhY2tFeHBvcnRzXSA9IHI7XG5cdFx0XHRcdGNvbXBsZXRlUXVldWUocXVldWUpO1xuXHRcdFx0XHRxdWV1ZSA9IDA7XG5cdFx0XHR9KTtcblx0XHRcdHZhciBvYmogPSB7fTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0b2JqW3dlYnBhY2tUaGVuXSA9IChmbiwgcmVqZWN0KSA9PiAocXVldWVGdW5jdGlvbihxdWV1ZSwgZm4pLCBkZXAuY2F0Y2gocmVqZWN0KSk7XG5cdFx0XHRyZXR1cm4gb2JqO1xuXHRcdH1cblx0fVxuXHR2YXIgcmV0ID0ge307XG5cdFx0XHRcdFx0XHRyZXRbd2VicGFja1RoZW5dID0gKGZuKSA9PiAoY29tcGxldGVGdW5jdGlvbihmbikpO1xuXHRcdFx0XHRcdFx0cmV0W3dlYnBhY2tFeHBvcnRzXSA9IGRlcDtcblx0XHRcdFx0XHRcdHJldHVybiByZXQ7XG59KSk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLmEgPSAobW9kdWxlLCBib2R5LCBoYXNBd2FpdCkgPT4ge1xuXHR2YXIgcXVldWUgPSBoYXNBd2FpdCAmJiBbXTtcblx0dmFyIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cztcblx0dmFyIGN1cnJlbnREZXBzO1xuXHR2YXIgb3V0ZXJSZXNvbHZlO1xuXHR2YXIgcmVqZWN0O1xuXHR2YXIgaXNFdmFsdWF0aW5nID0gdHJ1ZTtcblx0dmFyIG5lc3RlZCA9IGZhbHNlO1xuXHR2YXIgd2hlbkFsbCA9IChkZXBzLCBvblJlc29sdmUsIG9uUmVqZWN0KSA9PiB7XG5cdFx0aWYgKG5lc3RlZCkgcmV0dXJuO1xuXHRcdG5lc3RlZCA9IHRydWU7XG5cdFx0b25SZXNvbHZlLnIgKz0gZGVwcy5sZW5ndGg7XG5cdFx0ZGVwcy5tYXAoKGRlcCwgaSkgPT4gKGRlcFt3ZWJwYWNrVGhlbl0ob25SZXNvbHZlLCBvblJlamVjdCkpKTtcblx0XHRuZXN0ZWQgPSBmYWxzZTtcblx0fTtcblx0dmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqKSA9PiB7XG5cdFx0cmVqZWN0ID0gcmVqO1xuXHRcdG91dGVyUmVzb2x2ZSA9ICgpID0+IChyZXNvbHZlKGV4cG9ydHMpLCBjb21wbGV0ZVF1ZXVlKHF1ZXVlKSwgcXVldWUgPSAwKTtcblx0fSk7XG5cdHByb21pc2Vbd2VicGFja0V4cG9ydHNdID0gZXhwb3J0cztcblx0cHJvbWlzZVt3ZWJwYWNrVGhlbl0gPSAoZm4sIHJlamVjdEZuKSA9PiB7XG5cdFx0aWYgKGlzRXZhbHVhdGluZykgeyByZXR1cm4gY29tcGxldGVGdW5jdGlvbihmbik7IH1cblx0XHRpZiAoY3VycmVudERlcHMpIHdoZW5BbGwoY3VycmVudERlcHMsIGZuLCByZWplY3RGbik7XG5cdFx0cXVldWVGdW5jdGlvbihxdWV1ZSwgZm4pO1xuXHRcdHByb21pc2UuY2F0Y2gocmVqZWN0Rm4pO1xuXHR9O1xuXHRtb2R1bGUuZXhwb3J0cyA9IHByb21pc2U7XG5cdGJvZHkoKGRlcHMpID0+IHtcblx0XHRpZighZGVwcykgcmV0dXJuIG91dGVyUmVzb2x2ZSgpO1xuXHRcdGN1cnJlbnREZXBzID0gd3JhcERlcHMoZGVwcyk7XG5cdFx0dmFyIGZuLCByZXN1bHQ7XG5cdFx0dmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0XHRmbiA9ICgpID0+IChyZXNvbHZlKHJlc3VsdCA9IGN1cnJlbnREZXBzLm1hcCgoZCkgPT4gKGRbd2VicGFja0V4cG9ydHNdKSkpKTtcblx0XHRcdGZuLnIgPSAwO1xuXHRcdFx0d2hlbkFsbChjdXJyZW50RGVwcywgZm4sIHJlamVjdCk7XG5cdFx0fSk7XG5cdFx0cmV0dXJuIGZuLnIgPyBwcm9taXNlIDogcmVzdWx0O1xuXHR9KS50aGVuKG91dGVyUmVzb2x2ZSwgcmVqZWN0KTtcblx0aXNFdmFsdWF0aW5nID0gZmFsc2U7XG59OyIsImltcG9ydCAqIGFzIHdhc20gZnJvbSAnLi9tY2FwdGNoYV9icm93c2VyX2JnLndhc20nO1xuXG5sZXQgV0FTTV9WRUNUT1JfTEVOID0gMDtcblxubGV0IGNhY2hlZ2V0VWludDhNZW1vcnkwID0gbnVsbDtcbmZ1bmN0aW9uIGdldFVpbnQ4TWVtb3J5MCgpIHtcbiAgICBpZiAoY2FjaGVnZXRVaW50OE1lbW9yeTAgPT09IG51bGwgfHwgY2FjaGVnZXRVaW50OE1lbW9yeTAuYnVmZmVyICE9PSB3YXNtLm1lbW9yeS5idWZmZXIpIHtcbiAgICAgICAgY2FjaGVnZXRVaW50OE1lbW9yeTAgPSBuZXcgVWludDhBcnJheSh3YXNtLm1lbW9yeS5idWZmZXIpO1xuICAgIH1cbiAgICByZXR1cm4gY2FjaGVnZXRVaW50OE1lbW9yeTA7XG59XG5cbmNvbnN0IGxUZXh0RW5jb2RlciA9IHR5cGVvZiBUZXh0RW5jb2RlciA9PT0gJ3VuZGVmaW5lZCcgPyAoMCwgbW9kdWxlLnJlcXVpcmUpKCd1dGlsJykuVGV4dEVuY29kZXIgOiBUZXh0RW5jb2RlcjtcblxubGV0IGNhY2hlZFRleHRFbmNvZGVyID0gbmV3IGxUZXh0RW5jb2RlcigndXRmLTgnKTtcblxuY29uc3QgZW5jb2RlU3RyaW5nID0gKHR5cGVvZiBjYWNoZWRUZXh0RW5jb2Rlci5lbmNvZGVJbnRvID09PSAnZnVuY3Rpb24nXG4gICAgPyBmdW5jdGlvbiAoYXJnLCB2aWV3KSB7XG4gICAgcmV0dXJuIGNhY2hlZFRleHRFbmNvZGVyLmVuY29kZUludG8oYXJnLCB2aWV3KTtcbn1cbiAgICA6IGZ1bmN0aW9uIChhcmcsIHZpZXcpIHtcbiAgICBjb25zdCBidWYgPSBjYWNoZWRUZXh0RW5jb2Rlci5lbmNvZGUoYXJnKTtcbiAgICB2aWV3LnNldChidWYpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHJlYWQ6IGFyZy5sZW5ndGgsXG4gICAgICAgIHdyaXR0ZW46IGJ1Zi5sZW5ndGhcbiAgICB9O1xufSk7XG5cbmZ1bmN0aW9uIHBhc3NTdHJpbmdUb1dhc20wKGFyZywgbWFsbG9jLCByZWFsbG9jKSB7XG5cbiAgICBpZiAocmVhbGxvYyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnN0IGJ1ZiA9IGNhY2hlZFRleHRFbmNvZGVyLmVuY29kZShhcmcpO1xuICAgICAgICBjb25zdCBwdHIgPSBtYWxsb2MoYnVmLmxlbmd0aCk7XG4gICAgICAgIGdldFVpbnQ4TWVtb3J5MCgpLnN1YmFycmF5KHB0ciwgcHRyICsgYnVmLmxlbmd0aCkuc2V0KGJ1Zik7XG4gICAgICAgIFdBU01fVkVDVE9SX0xFTiA9IGJ1Zi5sZW5ndGg7XG4gICAgICAgIHJldHVybiBwdHI7XG4gICAgfVxuXG4gICAgbGV0IGxlbiA9IGFyZy5sZW5ndGg7XG4gICAgbGV0IHB0ciA9IG1hbGxvYyhsZW4pO1xuXG4gICAgY29uc3QgbWVtID0gZ2V0VWludDhNZW1vcnkwKCk7XG5cbiAgICBsZXQgb2Zmc2V0ID0gMDtcblxuICAgIGZvciAoOyBvZmZzZXQgPCBsZW47IG9mZnNldCsrKSB7XG4gICAgICAgIGNvbnN0IGNvZGUgPSBhcmcuY2hhckNvZGVBdChvZmZzZXQpO1xuICAgICAgICBpZiAoY29kZSA+IDB4N0YpIGJyZWFrO1xuICAgICAgICBtZW1bcHRyICsgb2Zmc2V0XSA9IGNvZGU7XG4gICAgfVxuXG4gICAgaWYgKG9mZnNldCAhPT0gbGVuKSB7XG4gICAgICAgIGlmIChvZmZzZXQgIT09IDApIHtcbiAgICAgICAgICAgIGFyZyA9IGFyZy5zbGljZShvZmZzZXQpO1xuICAgICAgICB9XG4gICAgICAgIHB0ciA9IHJlYWxsb2MocHRyLCBsZW4sIGxlbiA9IG9mZnNldCArIGFyZy5sZW5ndGggKiAzKTtcbiAgICAgICAgY29uc3QgdmlldyA9IGdldFVpbnQ4TWVtb3J5MCgpLnN1YmFycmF5KHB0ciArIG9mZnNldCwgcHRyICsgbGVuKTtcbiAgICAgICAgY29uc3QgcmV0ID0gZW5jb2RlU3RyaW5nKGFyZywgdmlldyk7XG5cbiAgICAgICAgb2Zmc2V0ICs9IHJldC53cml0dGVuO1xuICAgIH1cblxuICAgIFdBU01fVkVDVE9SX0xFTiA9IG9mZnNldDtcbiAgICByZXR1cm4gcHRyO1xufVxuXG5sZXQgY2FjaGVnZXRJbnQzMk1lbW9yeTAgPSBudWxsO1xuZnVuY3Rpb24gZ2V0SW50MzJNZW1vcnkwKCkge1xuICAgIGlmIChjYWNoZWdldEludDMyTWVtb3J5MCA9PT0gbnVsbCB8fCBjYWNoZWdldEludDMyTWVtb3J5MC5idWZmZXIgIT09IHdhc20ubWVtb3J5LmJ1ZmZlcikge1xuICAgICAgICBjYWNoZWdldEludDMyTWVtb3J5MCA9IG5ldyBJbnQzMkFycmF5KHdhc20ubWVtb3J5LmJ1ZmZlcik7XG4gICAgfVxuICAgIHJldHVybiBjYWNoZWdldEludDMyTWVtb3J5MDtcbn1cblxuY29uc3QgbFRleHREZWNvZGVyID0gdHlwZW9mIFRleHREZWNvZGVyID09PSAndW5kZWZpbmVkJyA/ICgwLCBtb2R1bGUucmVxdWlyZSkoJ3V0aWwnKS5UZXh0RGVjb2RlciA6IFRleHREZWNvZGVyO1xuXG5sZXQgY2FjaGVkVGV4dERlY29kZXIgPSBuZXcgbFRleHREZWNvZGVyKCd1dGYtOCcsIHsgaWdub3JlQk9NOiB0cnVlLCBmYXRhbDogdHJ1ZSB9KTtcblxuY2FjaGVkVGV4dERlY29kZXIuZGVjb2RlKCk7XG5cbmZ1bmN0aW9uIGdldFN0cmluZ0Zyb21XYXNtMChwdHIsIGxlbikge1xuICAgIHJldHVybiBjYWNoZWRUZXh0RGVjb2Rlci5kZWNvZGUoZ2V0VWludDhNZW1vcnkwKCkuc3ViYXJyYXkocHRyLCBwdHIgKyBsZW4pKTtcbn1cbi8qKlxuKiBnZW5lcmF0ZSBwcm9vZi1vZi13b3JrXG4qIGBgYHJ1c3RcbiogZm4gbWFpbigpIHtcbiogICAgdXNlIG1jYXB0Y2hhX2Jyb3dzZXI6Oio7XG4qICAgIHVzZSBwb3dfc2hhMjU2OjoqO1xuKlxuKlxuKiAgICAvLyBzYWx0IHVzaW5nIHdoaWNoIFBvVyBzaG91bGQgYmUgY29tcHV0ZWRcbiogICAgY29uc3QgU0FMVDogJnN0ciA9IFwieXJhbmRvbXNhbHRpc25vdGxvbmdlbm91Z1wiO1xuKiAgICAvLyBvbmUtdGltZSBwaHJhc2Ugb3ZlciB3aGljaCBQb1cgc2hvdWxkIGJlIGNvbXB1dGVkXG4qICAgIGNvbnN0IFBIUkFTRTogJnN0ciA9IFwiaXJvbm1hbnN1Y2tzXCI7XG4qICAgIC8vIGFuZCB0aGUgZGlmZmljdWx0eSBmYWN0b3JcbiogICAgY29uc3QgRElGRklDVUxUWTogdTMyID0gMTAwMDtcbipcbiogICAgLy8gY3VycmVudGx5IGdlbl9wb3coKSByZXR1cm5zIGEgSlNPTiBmb3JtYXRlZCBzdHJpbmcgdG8gYmV0dGVyIGNvbW11bmljYXRlXG4qICAgIC8vIHdpdGggSmF2YVNjcmlwdC4gU2VlIFtQb1c8VD5dW3Bvd19zaGEyNTY6OlBvV10gZm9yIHNjaGVtYVxuKiAgICBsZXQgc2VyaWFsaXNlZF93b3JrID0gZ2VuX3BvdyhTQUxULmludG8oKSwgUEhSQVNFLmludG8oKSwgRElGRklDVUxUWSk7XG4qXG4qXG4qICAgIGxldCB3b3JrOiBXb3JrID0gc2VyZGVfanNvbjo6ZnJvbV9zdHIoJnNlcmlhbGlzZWRfd29yaykudW53cmFwKCk7XG4qXG4qICAgIGxldCB3b3JrID0gUG9XQnVpbGRlcjo6ZGVmYXVsdCgpXG4qICAgICAgICAucmVzdWx0KHdvcmsucmVzdWx0KVxuKiAgICAgICAgLm5vbmNlKHdvcmsubm9uY2UpXG4qICAgICAgICAuYnVpbGQoKVxuKiAgICAgICAgLnVud3JhcCgpO1xuKlxuKiAgICBsZXQgY29uZmlnID0gQ29uZmlnQnVpbGRlcjo6ZGVmYXVsdCgpLnNhbHQoU0FMVC5pbnRvKCkpLmJ1aWxkKCkudW53cmFwKCk7XG4qICAgIGFzc2VydCEoY29uZmlnLmlzX3ZhbGlkX3Byb29mKCZ3b3JrLCAmUEhSQVNFLnRvX3N0cmluZygpKSk7XG4qICAgIGFzc2VydCEoY29uZmlnLmlzX3N1ZmZpY2llbnRfZGlmZmljdWx0eSgmd29yaywgRElGRklDVUxUWSkpO1xuKiB9XG4qIGBgYFxuKiBAcGFyYW0ge3N0cmluZ30gc2FsdFxuKiBAcGFyYW0ge3N0cmluZ30gcGhyYXNlXG4qIEBwYXJhbSB7bnVtYmVyfSBkaWZmaWN1bHR5X2ZhY3RvclxuKiBAcmV0dXJucyB7c3RyaW5nfVxuKi9cbmV4cG9ydCBmdW5jdGlvbiBnZW5fcG93KHNhbHQsIHBocmFzZSwgZGlmZmljdWx0eV9mYWN0b3IpIHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCByZXRwdHIgPSB3YXNtLl9fd2JpbmRnZW5fYWRkX3RvX3N0YWNrX3BvaW50ZXIoLTE2KTtcbiAgICAgICAgdmFyIHB0cjAgPSBwYXNzU3RyaW5nVG9XYXNtMChzYWx0LCB3YXNtLl9fd2JpbmRnZW5fbWFsbG9jLCB3YXNtLl9fd2JpbmRnZW5fcmVhbGxvYyk7XG4gICAgICAgIHZhciBsZW4wID0gV0FTTV9WRUNUT1JfTEVOO1xuICAgICAgICB2YXIgcHRyMSA9IHBhc3NTdHJpbmdUb1dhc20wKHBocmFzZSwgd2FzbS5fX3diaW5kZ2VuX21hbGxvYywgd2FzbS5fX3diaW5kZ2VuX3JlYWxsb2MpO1xuICAgICAgICB2YXIgbGVuMSA9IFdBU01fVkVDVE9SX0xFTjtcbiAgICAgICAgd2FzbS5nZW5fcG93KHJldHB0ciwgcHRyMCwgbGVuMCwgcHRyMSwgbGVuMSwgZGlmZmljdWx0eV9mYWN0b3IpO1xuICAgICAgICB2YXIgcjAgPSBnZXRJbnQzMk1lbW9yeTAoKVtyZXRwdHIgLyA0ICsgMF07XG4gICAgICAgIHZhciByMSA9IGdldEludDMyTWVtb3J5MCgpW3JldHB0ciAvIDQgKyAxXTtcbiAgICAgICAgcmV0dXJuIGdldFN0cmluZ0Zyb21XYXNtMChyMCwgcjEpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICAgIHdhc20uX193YmluZGdlbl9hZGRfdG9fc3RhY2tfcG9pbnRlcigxNik7XG4gICAgICAgIHdhc20uX193YmluZGdlbl9mcmVlKHIwLCByMSk7XG4gICAgfVxufVxuXG4iLCIvKlxuICogbUNhcHRjaGEgaXMgYSBQb1cgYmFzZWQgRG9TIHByb3RlY3Rpb24gc29mdHdhcmUuXG4gKiBUaGlzIGlzIHRoZSBmcm9udGVuZCB3ZWIgY29tcG9uZW50IG9mIHRoZSBtQ2FwdGNoYSBzeXN0ZW1cbiAqIENvcHlyaWdodCDCqSAyMDIxIEFyYXZpbnRoIE1hbml2bmFuYW4gPHJlYWxhcmF2aW50aEBiYXRzZW5zZS5uZXQ+LlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IEFwYWNoZSAyLjAgb3IgTUlUIGxpY2Vuc2UuXG4gKiBZb3Ugc2hvdWQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgTUlUIGFuZCBBcGFjaGUgMi4wIGFsb25nIHdpdGhcbiAqIHRoaXMgcHJvZ3JhbS4gSWYgbm90LCBzZWUgPGh0dHBzOi8vc3BkeC5vcmcvbGljZW5zZXMvTUlULmh0bWw+IGZvclxuICogTUlUIG9yIDxodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjA+IGZvciBBcGFjaGUuXG4gKi9cbmltcG9ydCB7Z2VuX3Bvd30gZnJvbSBcIm1jYXB0Y2hhLWJyb3dzZXJcIjtcbmltcG9ydCB7UGVyZn0gZnJvbSBcIi4vdHlwZXNcIjtcblxudHlwZSBQb1dDb25maWcgPSB7XG4gIHN0cmluZzogc3RyaW5nO1xuICBkaWZmaWN1bHR5X2ZhY3RvcjogbnVtYmVyO1xuICBzYWx0OiBzdHJpbmc7XG59O1xuXG5jb25zdCBTQUxUID0gXCI2NzQyNDM2NDdmMWMzNTVkYTg2MDdhOGNkZGEwNTEyMGQ3OWNhNWQxYWY4YjNiNDkzNTlkMDU2YTBhODJcIjtcbmNvbnN0IFBIUkFTRSA9IFwiNmUyYTUzZGJjN2QzMDc5NzBkN2JhM2MwMDAwMjIxNzIyY2I3NGYxYzMyNTEzNzI1MWNlOGZhNWMyMjQwXCI7XG5cbmNvbnN0IGNvbmZpZzogUG9XQ29uZmlnID0ge1xuICBzdHJpbmc6IFBIUkFTRSxcbiAgZGlmZmljdWx0eV9mYWN0b3I6IDEsXG4gIHNhbHQ6IFNBTFQsXG59O1xuXG5jb25zb2xlLmRlYnVnKFwid29ya2VyIHJlZ2lzdGVyZWRcIik7XG5cbm9ubWVzc2FnZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gIGNvbnNvbGUuZGVidWcoXCJtZXNzYWdlIHJlY2VpdmVkIGF0IHdvcmtlclwiKTtcbiAgY29uc3QgZGlmZmljdWx0eV9mYWN0b3IgPSBwYXJzZUludChldmVudC5kYXRhKTtcbiAgY29uZmlnLmRpZmZpY3VsdHlfZmFjdG9yID0gZGlmZmljdWx0eV9mYWN0b3I7XG5cbiAgY29uc3QgdDAgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgZ2VuX3Bvdyhjb25maWcuc2FsdCwgY29uZmlnLnN0cmluZywgY29uZmlnLmRpZmZpY3VsdHlfZmFjdG9yKTtcbiAgY29uc3QgdDEgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgY29uc3QgdGltZSA9IHQxIC0gdDA7XG5cbiAgY29uc3QgbXNnOiBQZXJmID0ge1xuICAgIGRpZmZpY3VsdHk6IGRpZmZpY3VsdHlfZmFjdG9yLFxuICAgIHRpbWU6IHRpbWUsXG4gIH07XG4gIHBvc3RNZXNzYWdlKG1zZyk7XG59O1xuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0bG9hZGVkOiBmYWxzZSxcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG5cdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmhtZCA9IChtb2R1bGUpID0+IHtcblx0bW9kdWxlID0gT2JqZWN0LmNyZWF0ZShtb2R1bGUpO1xuXHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsICdleHBvcnRzJywge1xuXHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0c2V0OiAoKSA9PiB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0VTIE1vZHVsZXMgbWF5IG5vdCBhc3NpZ24gbW9kdWxlLmV4cG9ydHMgb3IgZXhwb3J0cy4qLCBVc2UgRVNNIGV4cG9ydCBzeW50YXgsIGluc3RlYWQ6ICcgKyBtb2R1bGUuaWQpO1xuXHRcdH1cblx0fSk7XG5cdHJldHVybiBtb2R1bGU7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLnYgPSAoZXhwb3J0cywgd2FzbU1vZHVsZUlkLCB3YXNtTW9kdWxlSGFzaCwgaW1wb3J0c09iaikgPT4ge1xuXHR2YXIgcmVxID0gZmV0Y2goX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgXCJcIiArIHdhc21Nb2R1bGVIYXNoICsgXCIubW9kdWxlLndhc21cIik7XG5cdGlmICh0eXBlb2YgV2ViQXNzZW1ibHkuaW5zdGFudGlhdGVTdHJlYW1pbmcgPT09ICdmdW5jdGlvbicpIHtcblx0XHRyZXR1cm4gV2ViQXNzZW1ibHkuaW5zdGFudGlhdGVTdHJlYW1pbmcocmVxLCBpbXBvcnRzT2JqKVxuXHRcdFx0LnRoZW4oKHJlcykgPT4gKE9iamVjdC5hc3NpZ24oZXhwb3J0cywgcmVzLmluc3RhbmNlLmV4cG9ydHMpKSk7XG5cdH1cblx0cmV0dXJuIHJlcVxuXHRcdC50aGVuKCh4KSA9PiAoeC5hcnJheUJ1ZmZlcigpKSlcblx0XHQudGhlbigoYnl0ZXMpID0+IChXZWJBc3NlbWJseS5pbnN0YW50aWF0ZShieXRlcywgaW1wb3J0c09iaikpKVxuXHRcdC50aGVuKChyZXMpID0+IChPYmplY3QuYXNzaWduKGV4cG9ydHMsIHJlcy5pbnN0YW5jZS5leHBvcnRzKSkpO1xufTsiLCJ2YXIgc2NyaXB0VXJsO1xuaWYgKF9fd2VicGFja19yZXF1aXJlX18uZy5pbXBvcnRTY3JpcHRzKSBzY3JpcHRVcmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcubG9jYXRpb24gKyBcIlwiO1xudmFyIGRvY3VtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmRvY3VtZW50O1xuaWYgKCFzY3JpcHRVcmwgJiYgZG9jdW1lbnQpIHtcblx0aWYgKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpXG5cdFx0c2NyaXB0VXJsID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmNcblx0aWYgKCFzY3JpcHRVcmwpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGlmKHNjcmlwdHMubGVuZ3RoKSBzY3JpcHRVcmwgPSBzY3JpcHRzW3NjcmlwdHMubGVuZ3RoIC0gMV0uc3JjXG5cdH1cbn1cbi8vIFdoZW4gc3VwcG9ydGluZyBicm93c2VycyB3aGVyZSBhbiBhdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIHlvdSBtdXN0IHNwZWNpZnkgYW4gb3V0cHV0LnB1YmxpY1BhdGggbWFudWFsbHkgdmlhIGNvbmZpZ3VyYXRpb25cbi8vIG9yIHBhc3MgYW4gZW1wdHkgc3RyaW5nIChcIlwiKSBhbmQgc2V0IHRoZSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyB2YXJpYWJsZSBmcm9tIHlvdXIgY29kZSB0byB1c2UgeW91ciBvd24gbG9naWMuXG5pZiAoIXNjcmlwdFVybCkgdGhyb3cgbmV3IEVycm9yKFwiQXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXJcIik7XG5zY3JpcHRVcmwgPSBzY3JpcHRVcmwucmVwbGFjZSgvIy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcPy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcL1teXFwvXSskLywgXCIvXCIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gc2NyaXB0VXJsOyIsIi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLy8gVGhpcyBlbnRyeSBtb2R1bGUgdXNlZCAnbW9kdWxlJyBzbyBpdCBjYW4ndCBiZSBpbmxpbmVkXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMzAzKTtcbiJdLCJuYW1lcyI6WyJ3ZWJwYWNrVGhlbiIsIndlYnBhY2tFeHBvcnRzIiwiY29tcGxldGVRdWV1ZSIsImNvbXBsZXRlRnVuY3Rpb24iLCJxdWV1ZUZ1bmN0aW9uIiwiV0FTTV9WRUNUT1JfTEVOIiwiY2FjaGVnZXRVaW50OE1lbW9yeTAiLCJnZXRVaW50OE1lbW9yeTAiLCJidWZmZXIiLCJVaW50OEFycmF5IiwiY2FjaGVkVGV4dEVuY29kZXIiLCJUZXh0RW5jb2RlciIsIm1vZHVsZSIsInJlcXVpcmUiLCJlbmNvZGVTdHJpbmciLCJlbmNvZGVJbnRvIiwiYXJnIiwidmlldyIsImJ1ZiIsImVuY29kZSIsInNldCIsInJlYWQiLCJsZW5ndGgiLCJ3cml0dGVuIiwicGFzc1N0cmluZ1RvV2FzbTAiLCJtYWxsb2MiLCJyZWFsbG9jIiwidW5kZWZpbmVkIiwicHRyIiwic3ViYXJyYXkiLCJsZW4iLCJtZW0iLCJvZmZzZXQiLCJjb2RlIiwiY2hhckNvZGVBdCIsInNsaWNlIiwiY2FjaGVnZXRJbnQzMk1lbW9yeTAiLCJnZXRJbnQzMk1lbW9yeTAiLCJJbnQzMkFycmF5IiwiY2FjaGVkVGV4dERlY29kZXIiLCJUZXh0RGVjb2RlciIsImlnbm9yZUJPTSIsImZhdGFsIiwiZ2VuX3BvdyIsInNhbHQiLCJwaHJhc2UiLCJkaWZmaWN1bHR5X2ZhY3RvciIsInJldHB0ciIsInB0cjAiLCJsZW4wIiwicHRyMSIsImxlbjEiLCJyMCIsInIxIiwiZGVjb2RlIiwiY29uZmlnIiwic3RyaW5nIiwiY29uc29sZSIsImRlYnVnIiwib25tZXNzYWdlIiwiZXZlbnQiLCJwYXJzZUludCIsImRhdGEiLCJ0MCIsInBlcmZvcm1hbmNlIiwibm93IiwidDEiLCJwb3N0TWVzc2FnZSIsImRpZmZpY3VsdHkiLCJ0aW1lIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiZXhwb3J0cyIsImlkIiwibG9hZGVkIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIlN5bWJvbCIsInF1ZXVlIiwiZm9yRWFjaCIsImZuIiwiciIsInB1c2giLCJhIiwiYm9keSIsImhhc0F3YWl0IiwiY3VycmVudERlcHMiLCJvdXRlclJlc29sdmUiLCJyZWplY3QiLCJpc0V2YWx1YXRpbmciLCJuZXN0ZWQiLCJ3aGVuQWxsIiwiZGVwcyIsIm9uUmVzb2x2ZSIsIm9uUmVqZWN0IiwibWFwIiwiZGVwIiwiaSIsInByb21pc2UiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlaiIsInJlamVjdEZuIiwiY2F0Y2giLCJyZXN1bHQiLCJ0aGVuIiwib2JqIiwicmV0Iiwid3JhcERlcHMiLCJkIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJnIiwiZ2xvYmFsVGhpcyIsInRoaXMiLCJGdW5jdGlvbiIsImUiLCJ3aW5kb3ciLCJobWQiLCJjcmVhdGUiLCJjaGlsZHJlbiIsIkVycm9yIiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInYiLCJ3YXNtTW9kdWxlSWQiLCJ3YXNtTW9kdWxlSGFzaCIsImltcG9ydHNPYmoiLCJyZXEiLCJmZXRjaCIsInAiLCJXZWJBc3NlbWJseSIsImluc3RhbnRpYXRlU3RyZWFtaW5nIiwicmVzIiwiYXNzaWduIiwiaW5zdGFuY2UiLCJ4IiwiYXJyYXlCdWZmZXIiLCJieXRlcyIsImluc3RhbnRpYXRlIiwic2NyaXB0VXJsIiwiaW1wb3J0U2NyaXB0cyIsImxvY2F0aW9uIiwiZG9jdW1lbnQiLCJjdXJyZW50U2NyaXB0Iiwic3JjIiwic2NyaXB0cyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwicmVwbGFjZSJdLCJzb3VyY2VSb290IjoiIn0=